{"version":3,"file":"code/code.js","mappings":"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","sources":["webpack://_new/./figma/Property Conversions/create_fill_style .js","webpack://_new/./figma/Property Conversions/create_flex_size.js","webpack://_new/./figma/Property Conversions/create_size_style.js","webpack://_new/./figma/Property Conversions/create_text_style.js","webpack://_new/./figma/Property Conversions/utility_style_creator.js","webpack://_new/./figma/constants/tags.js","webpack://_new/./figma/filesystem/write_css_file.js","webpack://_new/./figma/generation/css_genereation.js","webpack://_new/./figma/generation/html_generation.js","webpack://_new/./figma/node_manager.js","webpack://_new/./figma/utils/colors/color_capacity_converter.js","webpack://_new/./node_modules/uid/dist/index.mjs","webpack://_new/webpack/bootstrap","webpack://_new/webpack/runtime/compat get default export","webpack://_new/webpack/runtime/define property getters","webpack://_new/webpack/runtime/hasOwnProperty shorthand","webpack://_new/webpack/runtime/make namespace object","webpack://_new/./src/code/js/code.js"],"sourcesContent":["import { color_and_opacity_converter,convert_decimal_to_rgba_value } from \"../utils/colors/color_capacity_converter\";\n\n\n\n \n\nexport default class create_fill_style {\n    constructor(node, process_array, isText = false) {\n        this.figmaLayers =  node.fills;\n        // get first three \n        this.figmaLayers = this.figmaLayers.slice(0, 3);\n        this.process_array = process_array;\n        this.isText = isText;\n       \n        this.colorAndOpacityConverter = color_and_opacity_converter;\n        this.convert_decimal_to_rgba_value = convert_decimal_to_rgba_value;\n\n         \n    }\n\n    fillSelection(){\n        if(this.isText){\n            this.textColorCss();\n        } else {\n            this.figmaLayersToBackgroundCSS();\n        }\n    }\n\n    textColorCss() {\n        let color = this.colorAndOpacityConverter(\n            this.figmaLayers[0].color,\n            this.figmaLayers[0].opacity\n        );\n        this.process_array.base.color = color;\n\n    }\n\n    figmaLayersToBackgroundCSS() {\n          // First layer\n         let  first_background =  this.imageOrSolidCss(this.figmaLayers[0]);\n         if(!first_background) return;\n         this.parse_and_add_background_to_array(first_background);\n         this.process_array.base.position = 'relative';\n        // Second layer (if present)\n        if (this.figmaLayers.length > 1) {\n            let second_background = this.imageOrSolidCss(this.figmaLayers[1]);\n            this.parse_and_add_background_to_array(second_background, 'before');\n            this.setStyles('before');\n         }\n\n        // Third layer (if present)\n        if (this.figmaLayers.length > 2) {\n            let third_background = this.imageOrSolidCss(this.figmaLayers[2]);\n            this.parse_and_add_background_to_array(third_background, 'after');\n            this.setStyles('after', 10);\n         }\n\n        \n    }\n\n    imageOrSolidCss(layer) {\n        if(!layer) return;\n        if (layer.type === \"IMAGE\") {\n            return this.generateImageLayerCSS(layer);\n        } else if (layer.type === \"SOLID\") {\n            return this.generateSolidLayerCSS(layer);\n        }\n    }\n\n    generateImageLayerCSS(layer) {\n        return  {\n            'background-image': 'url(https://picsum.photos/1600/800)',\n            'background-size': 'cover',\n            'background-position': 'center'\n        }\n    }\n        \n    generateSolidLayerCSS(layer) {\n      \n        return {\n            'background': this.colorAndOpacityConverter(\n                layer.color,\n                layer.opacity\n            )\n        }\n    }\n\n\n\n    parse_and_add_background_to_array(background, type = 'base'){\n        let background_keys = Object.keys(background);\n        background_keys.forEach((key) => {\n            this.process_array[type][key] = background[key];\n        })\n    }\n\n  \n \n\n    setStyles( type, zIndex = 5) {\n        this.process_array[type].content = '';\n        this.process_array[type].position = 'absolute';\n        this.process_array[type].top = '0';\n        this.process_array[type].left = '0';\n        this.process_array[type].width = '100%';\n        this.process_array[type].height = '100%';\n        this.process_array[type]['z-index'] = zIndex;\n     }\n}\n\n\n ","export default class create_flex_size {\n    constructor(node, css_to_be_processed) {\n        // layoutMode, name = \"\", primaryAxisAlignItems = \"MIN\", counterAxisAlignItems = \"MIN\", layoutWrap = \"NONE\"\n        const { layoutMode, name, primaryAxisAlignItems, counterAxisAlignItems, layoutWrap, verticalPadding,horizontalPadding, itemSpacing,\n            counterAxisSpacing\n\n        } = node;\n       \n       \n        this.layoutMode = layoutMode;\n        this.name = name;\n        this.primaryAxisAlignItems = primaryAxisAlignItems;\n        this.counterAxisAlignItems = counterAxisAlignItems;\n        this.isGrid = name.toLowerCase().includes('grid');\n        this.isWrap =  layoutWrap.toLowerCase() === 'wrap';\n        this.css_to_be_processed = css_to_be_processed;\n        this.verticalPadding = verticalPadding;\n\n        this.horiztionalPadding = horizontalPadding;\n        \n        this.itemSpacing = itemSpacing;\n        this.counterAxisSpacing = counterAxisSpacing;\n\n       \n    }\n\n    generate() {\n        this.handleLayoutMode();\n        this.handleWrap();\n        this.handleFlex();\n        this.spacing();\n        return this.css;\n    }\n\n    spacing(){\n         this.css_to_be_processed.base['padding'] = `${this.verticalPadding}px ${this.horiztionalPadding}px`;\n        //  gap based on the layout mode\n        if(this.layoutMode === 'HORIZONTAL' && !this.isWrap){\n            this.css_to_be_processed.base['gap'] = `${this.itemSpacing}px`;\n        } else if(this.layoutMode === 'VERTICAL' && !this.isWrap){\n            this.css_to_be_processed.base['gap'] = `${this.itemSpacing}px`;\n        } else {\n            this.css_to_be_processed.base['gap'] = `${this.counterAxisSpacing}px ${this.itemSpacing}px`;\n        }\n\n      \n\n    }\n    handleLayoutMode() {\n        if (this.layoutMode === \"NONE\") {\n            return;\n        } else if (this.layoutMode === \"HORIZONTAL\" && !this.isGrid) {\n           \n          this.css_to_be_processed.base['display'] = 'flex';\n            this.css_to_be_processed.base['flex-direction'] = 'row';\n        } else if (this.layoutMode === \"VERTICAL\" && !this.isGrid) {\n            \n            this.css_to_be_processed.base['display'] = 'flex';\n            this.css_to_be_processed.base['flex-direction'] = 'column';\n        } else if (this.isGrid) {\n          \n            this.css_to_be_processed.base['display'] = 'grid';\n             \n        }\n    }\n\n    handleWrap() {\n        if (this.isWrap) {\n          \n            this.css_to_be_processed.base['flex-wrap'] = 'wrap';\n        }\n    }\n\n    handleFlex() {\n        let isFlex = this.css_to_be_processed.base['display'] === 'flex';\n        if ( isFlex) {\n            const justify_content = this.convertAlignmentToCss(this.layoutMode === \"HORIZONTAL\" ? this.primaryAxisAlignItems : this.counterAxisAlignItems, 'justify-content');\n            const align_items = this.convertAlignmentToCss(this.layoutMode === \"HORIZONTAL\" ? this.counterAxisAlignItems : this.primaryAxisAlignItems, 'align-items');\n         \n            this.css_to_be_processed.base['justify-content'] = justify_content.split(':')[1].trim();\n            this.css_to_be_processed.base['align-items'] = align_items.split(':')[1].trim();\n        }\n    }\n\n    convertAlignmentToCss(value, property) {\n        value = value.toLowerCase();\n        const mapping = {\n            min: 'flex-start',\n            center: 'center',\n            max: 'flex-end'\n        };\n\n        return `${property}: ${mapping[value]};`;\n    }\n}\n","export default class create_size_style {\n    constructor(node,css_to_be_processed, isText = false) {\n        this.node = node;\n        this.css = '';\n        this.css_to_be_processed = css_to_be_processed;\n        this.isText = isText;\n    }\n\n    handleSizeOptions() {\n        const options = ['minWidth', 'minHeight', 'maxWidth', 'maxHeight'];\n\n        options.forEach(option => {\n            if (this.node[option] !== undefined && this.node[option] !== 0 && this.node[option] !== null) {\n             \n                this.css_to_be_processed.base[option] = `${this.node[option]}px`;\n            }\n        });\n    }\n\n    calculateChildSize() {\n        const { width, height, parent } = this.node;\n         let isContainer =  parent.width == undefined;\n         if(isContainer || this.isText) {\n          \n            this.css_to_be_processed.base['width'] =  `100%`;\n            this.css_to_be_processed.base['height'] =  `auto`;\n            return;\n         }\n\n           let childWidth = (width / parent.width) * 100;\n\n        childWidth = childWidth.toFixed(2);\n       \n        this.css_to_be_processed.base['width'] = `${childWidth}%`;\n\n        let childHeight = (height / parent.height) * 100;\n        childHeight = childHeight.toFixed(2);\n        this.css_to_be_processed.base['aspect-ratio'] = `${width}/${height}`;\n    }\n\n    generate() {\n        const { width, parent } = this.node;\n\n        this.handleSizeOptions();\n\n        if (width !== undefined) {\n            if (parent) {\n                this.calculateChildSize();\n            } else {\n                this.css += `width: 100%;\\n`;\n                this.css += `height: 100%;\\n`;\n            }\n        }\n\n        return this.css;\n    }\n}\n","export default class create_text_style {\n    constructor(node, process_array) {\n       \n        this.fills = node.fills;\n        this.fontName = node.fontName;\n        this.fontSize = node.fontSize;\n        this.fontWeight = node.fontWeight;\n        this.letterSpacing = node.letterSpacing;\n        this.lineHeight = node.lineHeight;\n        this.paragraphIndent = node.paragraphIndent;\n        this.paragraphSpacing = node.paragraphSpacing;\n        this.textCase = node.textCase;\n        this.textDecoration = node.textDecoration;\n        \n        this.textAlignHorizontal = node.textAlignHorizontal;\n        this.textAlignVertical = node.textAlignVertical;\n        this.process_array = process_array;\n        \n\n        this.textCaseMappings = {\n            UPPER: 'text-transform: uppercase',\n            LOWER: 'text-transform: lowercase',\n            TITLE: 'text-transform: capitalize',\n            ORIGINAL: 'text-transform: none',\n        };\n\n        this.textDecorationMappings = {\n            UNDERLINE: 'text-decoration: underline',\n            STRIKETHROUGH: 'text-decoration: line-through',\n            NONE: 'text-decoration: none',\n        };\n    }\n\n    static getStyleByValue(value, mapping) {\n        return mapping[value] || '';\n    }\n\n    createTextStyle() {\n       \n        const unitConversion   = {\n            PIXELS: 'px',\n            PERCENT: '%',\n            AUTO: 'auto',\n        };\n      \n    \n        // Text Decoration\n       \n        let textDecoration = create_text_style.getStyleByValue(this.textDecoration, this.textDecorationMappings).split(':')[1];\n        this.process_array.base['text-decoration'] =  textDecoration.trim();\n     \n       \n\n        // Letter Spacing\n        let letterSpacing = isNaN(this.letterSpacing.value) ? \"\" :  this.letterSpacing.value;\n       \n        \n        if(letterSpacing) {\n            this.process_array.base['letter-spacing'] =  `${letterSpacing}${unitConversion[this.letterSpacing.unit]}`;\n        }\n       \n        // lineHeight: \n        let lineHeight = isNaN(this.lineHeight.value) ? \"\" :  this.lineHeight.value;\n        if(lineHeight) {\n            this.process_array.base['line-height'] =  `${Math.round(lineHeight)}${unitConversion[this.lineHeight.unit]}`;\n        }\n     let paragraph_spacing = isNaN(this.paragraphSpacing) ? \"\" :  this.paragraphSpacing;\n        if(paragraph_spacing) {\n            this.process_array.base['margin-bottom'] =  `${Math.round(paragraph_spacing)}px`;\n        }\n      \n \n       let text_case  = create_text_style.getStyleByValue(this.textCase, this.textCaseMappings).split(':')[1];\n         this.process_array.base['text-transform'] =  text_case.trim();\n      \n        \n        \n  \n        this.process_array.base['font-family'] =  this.fontName.family;\n        this.process_array.base['font-size'] =  this.fontSize + 'px';\n        this.process_array.base['font-weight'] =  this.fontWeight;\n\n\n    // see if align is left, right, center, or justify\n        let text_align = this.textAlignHorizontal.toLowerCase();\n        if (!text_align.includes('left')) {\n            this.process_array.base['text-align'] =   text_align;\n        }\n        if (this.fontName.style.toLowerCase().includes('italic')) {\n       \n            this.process_array.base['font-style'] =  'italic';\n        }\n\n      \n    }\n}\n \n\n"," import { color_and_opacity_converter } from \"../utils/colors/color_capacity_converter\";\nexport default class utiltiy_style_creator {\n    constructor(node, css_to_be_processed) {\n        this.node = node;\n        this.css_to_be_processed = css_to_be_processed;\n       \n    }\n    generate() {\n        let functions_to_be_called = [\n            this.createRadiusStyle.bind(this),\n           \n            this.createBorderStyle.bind(this),\n            this.createOpacityStyles.bind(this),\n            this.createRotationStyle.bind(this),\n            this.createDropshadowStyle.bind(this),\n\n        ];\n    \n        functions_to_be_called.forEach((func) => {\n            let returned_object = (func && func()) || null;\n            if (returned_object) {\n                 let keys = Object.keys(returned_object);\n                keys.forEach(key => {\n                    this.css_to_be_processed.base[key] = returned_object[key];\n            }\n                );\n            }\n        });\n    }\n    \n    createRadiusStyle() {\n        const { topLeftRadius, topRightRadius, bottomRightRadius, bottomLeftRadius } = this.node || null;\n        if(!topLeftRadius && !topRightRadius && !bottomRightRadius && !bottomLeftRadius) return;\n        // if all zeros return\n        if(topLeftRadius === 0 && topRightRadius === 0 && bottomRightRadius === 0 && bottomLeftRadius === 0) return;\n\n        return {\n            ['border-radius']: `${topLeftRadius}px ${topRightRadius}px ${bottomRightRadius}px ${bottomLeftRadius}px`,\n        };\n    }\n\n    createPaddingStyle() {\n        const { paddingTop, paddingRight, paddingBottom, paddingLeft } = this.node || null;\n        if(!paddingTop && !paddingRight && !paddingBottom && !paddingLeft) return;\n        // if all zeros return\n        \n        return {\n            padding: `${paddingTop}px ${paddingRight}px ${paddingBottom}px ${paddingLeft}px`,\n        };\n    }\n\n    createBorderStyle() {\n        \n        const { strokes, \n            strokeTopWeight, \n            strokeRightWeight,\n            strokeBottomWeight,\n            strokeLeftWeight,\n        } = this.node || null;\n        if(!strokes) return;\n        const stroke = strokes && strokes[0];\n     \n\n        if (!stroke) {\n            return null; // No strokes provided\n        }\n\n        const { color, opacity } = stroke;\n   \n        const roundedOpacity = opacity.toFixed(2);\n\n        const rgbaColor = color_and_opacity_converter(color, roundedOpacity);\n          let weight; \n        if(strokeTopWeight === strokeRightWeight && strokeTopWeight === strokeBottomWeight && strokeTopWeight === strokeLeftWeight){\n            weight = `${strokeTopWeight}px`;\n        } else {\n            weight = `${strokeTopWeight}px ${strokeRightWeight}px ${strokeBottomWeight}px ${strokeLeftWeight}px`;\n        }\n\n        return {\n            border: `${weight}  solid ${rgbaColor}`,\n          \n        };\n    }\n\n    createOpacityStyles() {\n        const { opacity } = this.node || null;\n        if(!opacity) return;\n        \n        const dividedBy100 = opacity;\n        const roundedOpacity = dividedBy100.toFixed(2);\n            \n        return {\n            opacity: `${roundedOpacity}`,\n        };\n    }\n\n    createRotationStyle() {\n        const { rotation } = this.node || null  ;\n        let rotationValue = rotation;\n        // fixc to 2 \n        if(!rotationValue) return;\n        rotationValue = rotationValue.toFixed(2);\n        return {\n            transform: `rotate(${rotationValue || 0}deg)`,\n        };\n    }\n\n    createDropshadowStyle() {\n        const { effects } = this.node || null;\n        if(!effects) return;\n        const dropShadowEffect = effects && effects.find(effect => effect.type === \"DROP_SHADOW\");\n\n        if (!dropShadowEffect) {\n            return null;\n        }\n\n        const { color, offset, radius, spread } = dropShadowEffect;\n        let new_color = {\n            r: color.r,\n            g: color.g,\n            b: color.b,\n            \n        }\n        let new_opacity = color.a;\n        const roundedOpacity = new_opacity.toFixed(2);\n        const rgbaColor = color_and_opacity_converter(new_color, roundedOpacity);\n        const boxShadowValue = `${offset.x}px ${offset.y}px ${radius}px ${spread}px  ${rgbaColor}`;\n\n        return {\n             ['box-shadow']: boxShadowValue,\n        };\n    }\n}\n\n "," \n\nexport default {\n    \"h1\": \"h1\",\n    \"h2\": \"h2\",\n    \"h3\": \"h3\",\n    \"h4\": \"h4\",\n    \"h5\": \"h5\",\n    \"h6\": \"h6\",\n    \"p\": \"p\",\n    \"image\": \"img\",\n    \"section\": \"section\",\n    \"aside\": \"aside\",\n    \"form\": \"form\",\n    \"input\": \"input\",\n    \"button\": \"button\",\n    \"label\": \"label\",\n    \"select\": \"select\",\n    \"option\": \"option\",\n    \"textarea\": \"textarea\",\n    \"div\": \"div\",\n    \"span\": \"span\",\n    \"ul\": \"ul\",\n    \"li\": \"li\",\n    \"ol\": \"ol\",\n    \"nav\": \"nav\",\n    \"header\": \"header\",\n    \"footer\": \"footer\",\n    \"main\": \"main\",\n    \"article\": \"article\",\n    \"a\": \"a\",\n    \n    \n};"," \n\nclass write_css_file {\n    constructor(css_objects){\n        this.css_objects = css_objects;\n        this.remove_duplicates();\n\n        this.css_string = this.css_string_constructor();\n     \n    }\n\n    css_string_constructor() {\n        let css_string = '';\n        this.clean_css_objects.forEach((css_object) => {\n            let states = ['base', 'before', 'after', 'hover', 'focus'];\n            states.forEach((state) => {\n             \n    \n                let object = css_object[state];\n                // object_keys\n                let object_keys = Object.keys(object);\n                // if css_object or object_keys is empty or object keys = 0 return;\n                if (!css_object || !object_keys || object_keys.length === 0) return;\n                let add_id = css_object.modify_id ? `#${css_object.id}` : '';\n                   // css string with id and class name for specificity; if state is not base, add pseudo-class\n                   css_string += `${add_id} .${css_object.class_name}${state === 'base' ? '' : `:${state}`} { \\n`;\n    \n                object_keys.forEach((key) => {\n                    let value = object[key];\n                    let skip_values = ['undefined', 'null', '', 'none', 'auto', '1', '1.00'];\n                    if ( value &&  skip_values.includes(value)) return;\n                    css_string += `${key}: ${value}; \\n`;\n                });\n    \n                css_string += `} \\n \\n`;\n            });\n        });\n        return css_string;\n    \n       \n    }\n\n/**\n * Removes duplicate CSS objects based on class_name and properties within states.\n */\nremove_duplicates() {\n    \n\n    // Initialize an array to store unique CSS objects\n    this.clean_css_objects = [];\n\n    // Iterate through each CSS object\n    this.css_objects.forEach((css_object) => {\n        // Call the helper function to handle duplicate removal\n        this.removeDuplicateStates(css_object);\n    });\n}\n\n/**\n * Checks for duplicate CSS objects based on class_name and decides whether to add the current css_object.\n * @param {Object} css_object - The CSS object to check for duplicates.\n */\nremoveDuplicateStates(css_object) {\n    // Find a comparable object in the existing clean_css_objects array\n    let compareable_object = this.clean_css_objects.find((clean_css_object) => clean_css_object.class_name === css_object.class_name);\n\n    // If a comparable object is found, remove duplicates and add the current css_object\n    if (compareable_object) {\n        this.removeDuplicateProperties(css_object, compareable_object);\n        this.clean_css_objects.push(css_object);\n        \n    } else {\n        css_object.modify_id = false;\n        // If no comparable object is found, simply add the current css_object\n        this.clean_css_objects.push(css_object);\n    }\n}\n\n/**\n * Compares and removes duplicate properties within states.\n * @param {Object} css_object - The current CSS object.\n * @param {Object} compareable_object - The comparable CSS object.\n */\nremoveDuplicateProperties(css_object, compareable_object) {\n    // Define the states to compare\n    let states = ['base', 'before', 'after', 'hover', 'focus'];\n\n    // Iterate through each state\n    states.forEach((state) => {\n        // Extract the state's object and keys\n        let object = css_object[state];\n        let object_keys = Object.keys(object);\n\n        // If necessary properties are missing, skip this state\n        if (!css_object || !object_keys || object_keys.length === 0) return;\n\n        // Iterate through each property within the state\n        object_keys.forEach((key) => {\n            let value = object[key];\n\n            // If a property is found and matches the comparable object, delete it\n            if (value && compareable_object[state][key] === value) {\n                delete css_object[state][key];\n            }\n        });\n    });\n    css_object.modify_id = true;\n}\n\n\n    \n \n\n\n}\n\n\nexport default write_css_file;"," import create_fill_style from \"../Property Conversions/create_fill_style \";\nimport create_flex_size from \"../Property Conversions/create_flex_size\";\nimport create_size_style from \"../Property Conversions/create_size_style\";\nimport create_text_style from \"../Property Conversions/create_text_style\";\nimport utiltiy_style_creator from \"../Property Conversions/utility_style_creator\";\n\n\n \n \nexport default class CSS_Generation{\n    constructor(node, id, class_name){\n        this.node = node;\n        this.id = id;\n        this.class_name = class_name;\n        this.css = '';\n        this.parent  = node.parent;\n        this.grid = node.name.toLowerCase().includes('grid');\n        this.flex = node.name.toLowerCase().includes('flex');\n        this.css_to_be_processed = {\n            id: this.id,\n            class_name: this.class_name,\n            screenSize:\"desktop\",\n            base: {},\n            before: {},\n            after: {},\n            hover: {},\n            focus: {},\n        }\n        this.layoutMode = node.layoutMode;\n        this.isText = this.node.type === \"TEXT\";\n\n    \n  \n    }\n\n    generate(){\n        this.css = this.css_creation();\n        return this.css_to_be_processed;\n    }\n\n    css_creation(){\n      let fill  = new create_fill_style(this.node, this.css_to_be_processed, this.isText).fillSelection();\n      this.isText && new create_text_style(this.node, this.css_to_be_processed).createTextStyle();\n      if(!this.layoutMode == 'NONE')  new create_flex_size(this.node, this.css_to_be_processed).generate();\n        new create_size_style(this.node, this.css_to_be_processed, this.isText).generate();\n        new utiltiy_style_creator(this.node, this.css_to_be_processed, this.isText).generate();\n    }\n\n}","/** \n * HTML_Generation class represents a utility for generating HTML code based on a provided node.\n * \n * Table of Contents:\n * 1. Constructor\n * 2. generate\n * 3. html_creation\n * 4. tag_handler\n * 5. attributes\n * 6. get_variants\n * 7. is_closed_html_elements_method\n * 8. convert_children_to_html\n * 9. indentation_spacing\n * 10. isText\n */\n\nimport tags from \"../constants/tags\";\n \n\nimport { uid } from \"uid\";\nimport CSS_Generation from \"./css_genereation\";\nimport Node_Manager from \"../node_manager\";\n \n\n \nexport default class HTML_Generation {\n    /**\n     * 1. Constructor for HTML_Generation class.\n     * @param {Object} node - The node used for HTML generation.\n     */\n    constructor(node) {\n        this.node = node;\n       \n      \n    }\n\n    /**\n     * 2. Generates HTML code based on the provided node.\n     */\n    generate(indentation = 1, css_objects_to_string  = []) {\n        this.indentation = indentation;\n        this.css_objects_to_string = css_objects_to_string;\n        this.html = this.html_creation();\n      \n       \n       \n     return this.html;\n    }\n\n    /**\n     * 3. Creates HTML code by handling tags, attributes, and self-closing elements.\n     */\n    html_creation() {\n       \n        const { tag, id, variant_classes } = this.tag_handler(this.node.name);\n        this.css =  new CSS_Generation(this.node, this.id,  variant_classes);\n        this.css =  this.css.generate();\n       \n        this.css_objects_to_string.push(this.css);\n\n        const isText = this.isText(this.node);\n        \n        const indentation_spacing = this.indentation_spacing();\n        let text = isText ? this.node.characters : '';\n         const selfClosing = this.is_closed_html_elements_method(tag);\n        const closingTag = selfClosing ? '' : `</${ isText ? \"span\" : tag}>`;\n        const closing_slash = selfClosing ? '/' : '';\n         const children_html = this.convert_children_to_html(this.node.children);\n         \n\n\n         return `\\n${indentation_spacing}<${isText ? 'span' : tag} id=\"${id}\" class=\"${variant_classes}\"${closing_slash}>${text}${children_html}${ !isText ? indentation_spacing : \"\"}${ closingTag}`;\n    }\n\n    /**\n     * 4. Handles the selection of tags based on the node name.\n     * @param {string} name - The name of the node.\n     * @returns {Object} - An object containing tag, id, and variant_classes.\n     */\n    tag_handler(name) {\n        //  if name includes . then separate \n        let orginial_name = name;\n        name = name.split('.')[0];\n\n        const tag = tags[name.toLowerCase()] || \"div\";\n        const { id, variant_classes } =  this.attributes(orginial_name);\n        return { tag, id, variant_classes };\n    }\n\n    /**\n     * 5. Extracts attributes (id and variant_classes) from the provided name.\n     * @param {string} name - The name of the node.\n     * @returns {Object} - An object containing id and variant_classes.\n     */\n    attributes(name) {\n        let orginial_name = name;\n       if(name.includes('.')){\n           name = name.split('.')[1];\n         }\n        const id = `${name.toLowerCase() + \"-\" + uid(10)}`.replaceAll(\" \", \"-\");\n        const classes = name.toLowerCase().replaceAll(\" \", \"-\");\n        this.id = id;\n        this.class_name = classes;\n        const variant_classes = `${classes}${this.get_variants()}`;\n        return { id, variant_classes };\n    }\n\n    /**x\n     * 6. Extracts variant classes from the node's variant properties.\n     * @returns {string} - A string containing variant classes.\n     */\n    get_variants() {\n        return this.node.variantProperties ? Object.keys(this.node.variantProperties).map((key) => `  ${this.node.variantProperties[key].toLowerCase().replace(\" \", \"-\")}`).join(\"\") : \"\";\n    }\n\n    /**\n     * 7. Checks if a given HTML element is self-closing.\n     * @param {string} value - The HTML element tag.\n     * @returns {boolean} - True if the element is self-closing, otherwise false.\n     */\n    is_closed_html_elements_method(value) {\n        const selfClosingTags = ['img', 'input', 'br', 'hr', 'meta', 'link', 'param', 'source', 'area', 'base', 'col', 'embed', 'keygen', 'menuitem', 'track', 'wbr'];\n        return selfClosingTags.includes(value);\n    }\n\n    /**\n     * 8. Converts the node's children to HTML code.\n     * @param {Array} children - The array of children nodes.\n     * \n     * @returns {string} - A string containing HTML code.\n     */\n    convert_children_to_html(children) {\n        if (!children || !Array.isArray(children)) return \"\";\n     \n        const indentation_spacing = this.indentation_spacing();\n\n        const children_html = children.map((child) => {\n            const node_manager = new Node_Manager(child);\n            return node_manager.html.generate( this.indentation + 1, this.css_objects_to_string);\n        }).join(\"\");\n\n        return `${indentation_spacing}${children_html}\\n`;\n    }\n\n    /**\n     * 9. Creates indentation spacing based on the current indentation level.\n     * @returns {string} - A string containing indentation spacing.\n     */\n\n    indentation_spacing() {\n         \n        let indentation = \"\";\n        for (let i = 0; i <  this.indentation ; i++) {\n           \n            indentation += \"  \";  // Use spaces for indentation\n        }\n    \n       \n        return indentation;\n    }\n    \n    /**\n     * 10. Checks if a given node is a text node.\n     * @param {Object} node - The node to check.\n     * @returns {boolean} - True if the node is a text node, otherwise false.\n     */\n    isText(node) {\n        return node.type === \"TEXT\";\n    }\n\n}\n ","import HTML_Generation from \"./generation/html_generation\";\n\n \nexport default class Node_Manager {\n    constructor(node){\n        this.node = node;\n        this.html = new HTML_Generation(node);\n    \n      \n         \n    }\n\n}"," \n const rgb_to_hex  = (r, g, b)  => {\n    const toHex = (value) => {\n        const hex = value.toString(16);\n        return hex.length === 1 ? '0' + hex : hex;\n    };\n\n    const hexR = toHex(r);\n    const hexG = toHex(g);\n    const hexB = toHex(b);\n\n    return `#${hexR}${hexG}${hexB}`;\n}\n\nconst convert_decimal_to_rgba_value = (value = .5) => {\n    // convert to 255 rgba value and be sure to round to the nearest whole number\n    return Math.round(value * 255);\n\n}\n\n  const color_and_opacity_converter =  (color, opacity) =>  {\n    \n \n     \n    const { r, g, b } = color;\n    const red = convert_decimal_to_rgba_value(r);\n    const green = convert_decimal_to_rgba_value(g);\n    const blue = convert_decimal_to_rgba_value(b);\n\n     \n    if(+opacity === 1){\n        let hex =  rgb_to_hex(red, green, blue);\n        return hex;\n    } else {\n        return `rgba(${red}, ${green}, ${blue}, ${opacity})`;\n    }\n  \n    \n\n}\n\n\n// export colorAndOpacityConverter and rgb_to_hex\nmodule.exports=  { color_and_opacity_converter, rgb_to_hex, convert_decimal_to_rgba_value }","var IDX=256, HEX=[], SIZE=256, BUFFER;\nwhile (IDX--) HEX[IDX] = (IDX + 256).toString(16).substring(1);\n\nexport function uid(len) {\n\tvar i=0, tmp=(len || 11);\n\tif (!BUFFER || ((IDX + tmp) > SIZE*2)) {\n\t\tfor (BUFFER='',IDX=0; i < SIZE; i++) {\n\t\t\tBUFFER += HEX[Math.random() * 256 | 0];\n\t\t}\n\t}\n\n\treturn BUFFER.substring(IDX, IDX++ + tmp);\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};"," \nimport write_css_file from \"../../../figma/filesystem/write_css_file\";\nimport Node_Manager from \"../../../figma/node_manager\";\n (function() {\n  const currentLayer = figma.currentPage.selection[0];\n\n  if (!currentLayer) {\n    figma.closePlugin(\"Please select a layer and try again\");\n  } else {\n    const node_manager = new Node_Manager(currentLayer);\n\n    node_manager.html.generate();\n    let html = node_manager.html.html;\n    let css_object = node_manager.html.css_objects_to_string;\n\n    const css = new write_css_file(css_object).css_string;\n figma.showUI(__html__, { width: 800, height: 800 });\n    figma.ui.postMessage({\n      type: \"generation\",\n      html: html,\n      css: css,\n    \n    }, {origin: '*'});\n  }\n  // figma.closePlugin();\n })();\n   \n\n"],"names":["create_fill_style","constructor","node","process_array","isText","this","figmaLayers","fills","slice","colorAndOpacityConverter","color_and_opacity_converter","convert_decimal_to_rgba_value","fillSelection","textColorCss","figmaLayersToBackgroundCSS","color","opacity","base","first_background","imageOrSolidCss","parse_and_add_background_to_array","position","length","second_background","setStyles","third_background","layer","type","generateImageLayerCSS","generateSolidLayerCSS","background","Object","keys","forEach","key","zIndex","content","top","left","width","height","create_flex_size","css_to_be_processed","layoutMode","name","primaryAxisAlignItems","counterAxisAlignItems","layoutWrap","verticalPadding","horizontalPadding","itemSpacing","counterAxisSpacing","isGrid","toLowerCase","includes","isWrap","horiztionalPadding","generate","handleLayoutMode","handleWrap","handleFlex","spacing","css","justify_content","convertAlignmentToCss","align_items","split","trim","value","property","min","center","max","create_size_style","handleSizeOptions","option","undefined","calculateChildSize","parent","childWidth","toFixed","childHeight","create_text_style","fontName","fontSize","fontWeight","letterSpacing","lineHeight","paragraphIndent","paragraphSpacing","textCase","textDecoration","textAlignHorizontal","textAlignVertical","textCaseMappings","UPPER","LOWER","TITLE","ORIGINAL","textDecorationMappings","UNDERLINE","STRIKETHROUGH","NONE","getStyleByValue","mapping","createTextStyle","unitConversion","PIXELS","PERCENT","AUTO","isNaN","unit","Math","round","paragraph_spacing","text_case","family","text_align","style","utiltiy_style_creator","createRadiusStyle","bind","createBorderStyle","createOpacityStyles","createRotationStyle","createDropshadowStyle","func","returned_object","topLeftRadius","topRightRadius","bottomRightRadius","bottomLeftRadius","createPaddingStyle","paddingTop","paddingRight","paddingBottom","paddingLeft","padding","strokes","strokeTopWeight","strokeRightWeight","strokeBottomWeight","strokeLeftWeight","stroke","roundedOpacity","weight","border","rotation","rotationValue","transform","effects","dropShadowEffect","find","effect","offset","radius","spread","new_color","r","g","b","a","rgbaColor","x","y","css_objects","remove_duplicates","css_string","css_string_constructor","clean_css_objects","css_object","state","object","object_keys","add_id","modify_id","id","class_name","removeDuplicateStates","compareable_object","clean_css_object","removeDuplicateProperties","push","CSS_Generation","grid","flex","screenSize","before","after","hover","focus","css_creation","HTML_Generation","indentation","css_objects_to_string","html","html_creation","tag","variant_classes","tag_handler","indentation_spacing","text","characters","selfClosing","is_closed_html_elements_method","closingTag","convert_children_to_html","children","orginial_name","tags","attributes","uid","replaceAll","classes","get_variants","variantProperties","map","replace","join","Array","isArray","child","Node_Manager","i","rgb_to_hex","toHex","hex","toString","module","exports","red","green","blue","BUFFER","IDX","HEX","SIZE","substring","len","tmp","random","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","n","getter","__esModule","d","definition","o","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","currentLayer","figma","currentPage","selection","node_manager","write_css_file","showUI","__html__","ui","postMessage","origin","closePlugin"],"sourceRoot":""}