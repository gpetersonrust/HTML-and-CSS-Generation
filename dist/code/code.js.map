{"version":3,"file":"code/code.js","mappings":"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","sources":["webpack://_new/./figma/Property Conversions/create_fill_style .js","webpack://_new/./figma/Property Conversions/create_flex_size.js","webpack://_new/./figma/Property Conversions/create_size_style.js","webpack://_new/./figma/Property Conversions/create_text_style.js","webpack://_new/./figma/Property Conversions/utility_style_creator.js","webpack://_new/./figma/constants/tags.js","webpack://_new/./figma/filesystem/write_css_file.js","webpack://_new/./figma/generation/css_genereation.js","webpack://_new/./figma/generation/html_generation.js","webpack://_new/./figma/node_manager.js","webpack://_new/./figma/utils/classes/duplicate_remove.js","webpack://_new/./figma/utils/colors/color_capacity_converter.js","webpack://_new/./node_modules/uid/dist/index.mjs","webpack://_new/webpack/bootstrap","webpack://_new/webpack/runtime/compat get default export","webpack://_new/webpack/runtime/define property getters","webpack://_new/webpack/runtime/hasOwnProperty shorthand","webpack://_new/webpack/runtime/make namespace object","webpack://_new/./src/code/js/code.js"],"sourcesContent":["import { color_and_opacity_converter,convert_decimal_to_rgba_value } from \"../utils/colors/color_capacity_converter\";\n\n\n\n \n\nexport default class create_fill_style {\n    constructor(node, process_array, isText = false) {\n        this.figmaLayers =  node.fills;\n        // get first three \n        this.figmaLayers = this.figmaLayers.slice(0, 3);\n        this.process_array = process_array;\n        this.isText = isText;\n       \n        this.colorAndOpacityConverter = color_and_opacity_converter;\n        this.convert_decimal_to_rgba_value = convert_decimal_to_rgba_value;\n\n         \n    }\n\n    fillSelection(){\n        if(this.isText){\n            this.textColorCss();\n        } else {\n            this.figmaLayersToBackgroundCSS();\n        }\n    }\n\n    textColorCss() {\n        let color = this.colorAndOpacityConverter(\n            this.figmaLayers[0].color,\n            this.figmaLayers[0].opacity\n        );\n        this.process_array.base.color = color;\n\n    }\n\n    figmaLayersToBackgroundCSS() {\n          // First layer\n         let  first_background =  this.imageOrSolidCss(this.figmaLayers[0]);\n         if(!first_background) return;\n         this.parse_and_add_background_to_array(first_background);\n         this.process_array.base.position = 'relative';\n        // Second layer (if present)\n        if (this.figmaLayers.length > 1) {\n            let second_background = this.imageOrSolidCss(this.figmaLayers[1]);\n            this.parse_and_add_background_to_array(second_background, 'before');\n            this.setStyles('before');\n         }\n\n        // Third layer (if present)\n        if (this.figmaLayers.length > 2) {\n            let third_background = this.imageOrSolidCss(this.figmaLayers[2]);\n            this.parse_and_add_background_to_array(third_background, 'after');\n            this.setStyles('after', 10);\n         }\n\n        \n    }\n\n    imageOrSolidCss(layer) {\n        if(!layer) return;\n        if (layer.type === \"IMAGE\") {\n            return this.generateImageLayerCSS(layer);\n        } else if (layer.type === \"SOLID\") {\n            return this.generateSolidLayerCSS(layer);\n        }\n    }\n\n    generateImageLayerCSS(layer) {\n        return  {\n            'background-image': 'url(https://picsum.photos/1600/800)',\n            'background-size': 'cover',\n            'background-position': 'center'\n        }\n    }\n        \n    generateSolidLayerCSS(layer) {\n      \n        return {\n            'background': this.colorAndOpacityConverter(\n                layer.color,\n                layer.opacity\n            )\n        }\n    }\n\n\n\n    parse_and_add_background_to_array(background, type = 'base'){\n        let background_keys = Object.keys(background);\n        background_keys.forEach((key) => {\n            this.process_array[type][key] = background[key];\n        })\n    }\n\n  \n \n\n    setStyles( type, zIndex = 5) {\n        this.process_array[type].content = '';\n        this.process_array[type].position = 'absolute';\n        this.process_array[type].top = '0';\n        this.process_array[type].left = '0';\n        this.process_array[type].width = '100%';\n        this.process_array[type].height = '100%';\n        this.process_array[type]['z-index'] = zIndex;\n     }\n}\n\n\n ","export default class create_flex_size {\n    constructor(node, css_to_be_processed) {\n      \n        // layoutMode, name = \"\", primaryAxisAlignItems = \"MIN\", counterAxisAlignItems = \"MIN\", layoutWrap = \"NONE\"\n        const { layoutMode, name, primaryAxisAlignItems, counterAxisAlignItems, layoutWrap, verticalPadding,horizontalPadding, itemSpacing,\n            counterAxisSpacing\n\n        } = node;\n       \n       \n        this.layoutMode = layoutMode;\n        this.name = name;\n        this.primaryAxisAlignItems = primaryAxisAlignItems;\n        this.counterAxisAlignItems = counterAxisAlignItems;\n        this.isGrid = name.toLowerCase().includes('grid');\n        this.isWrap =  layoutWrap.toLowerCase() === 'wrap';\n        this.css_to_be_processed = css_to_be_processed;\n        this.verticalPadding = verticalPadding;\n\n        this.horiztionalPadding = horizontalPadding;\n        \n        this.itemSpacing = itemSpacing;\n        this.counterAxisSpacing = counterAxisSpacing;\n\n       \n    }\n\n    generate() {\n        this.handleLayoutMode();\n        this.handleWrap();\n        this.handleFlex();\n        this.spacing();\n        return this.css;\n    }\n\n    spacing(){\n         this.css_to_be_processed.base['padding'] = `${this.verticalPadding}px ${this.horiztionalPadding}px`;\n        //  gap based on the layout mode\n        if(this.layoutMode === 'HORIZONTAL' && !this.isWrap){\n            this.css_to_be_processed.base['gap'] = `${this.itemSpacing}px`;\n        } else if(this.layoutMode === 'VERTICAL' && !this.isWrap){\n            this.css_to_be_processed.base['gap'] = `${this.itemSpacing}px`;\n        } else {\n            this.css_to_be_processed.base['gap'] = `${this.counterAxisSpacing}px ${this.itemSpacing}px`;\n        }\n\n      \n\n    }\n    handleLayoutMode() {\n        if (this.layoutMode === \"NONE\") {\n            return;\n        } else if (this.layoutMode === \"HORIZONTAL\" && !this.isGrid) {\n           \n          this.css_to_be_processed.base['display'] = 'flex';\n            this.css_to_be_processed.base['flex-direction'] = 'row';\n        } else if (this.layoutMode === \"VERTICAL\" && !this.isGrid) {\n            \n            this.css_to_be_processed.base['display'] = 'flex';\n            this.css_to_be_processed.base['flex-direction'] = 'column';\n        } else if (this.isGrid) {\n          \n            this.css_to_be_processed.base['display'] = 'grid';\n             \n        }\n    }\n\n    handleWrap() {\n        if (this.isWrap) {\n          \n            this.css_to_be_processed.base['flex-wrap'] = 'wrap';\n        }\n    }\n\n    handleFlex() {\n        let isFlex = this.css_to_be_processed.base['display'] === 'flex';\n        if ( isFlex) {\n            const justify_content = this.convertAlignmentToCss(this.layoutMode === \"HORIZONTAL\" ? this.primaryAxisAlignItems : this.counterAxisAlignItems, 'justify-content');\n            const align_items = this.convertAlignmentToCss(this.layoutMode === \"HORIZONTAL\" ? this.counterAxisAlignItems : this.primaryAxisAlignItems, 'align-items');\n         \n            this.css_to_be_processed.base['justify-content'] = justify_content.split(':')[1].trim();\n            this.css_to_be_processed.base['align-items'] = align_items.split(':')[1].trim();\n        }\n    }\n\n    convertAlignmentToCss(value, property) {\n        value = value.toLowerCase();\n        const mapping = {\n            min: 'flex-start',\n            center: 'center',\n            max: 'flex-end'\n        };\n\n        return `${property}: ${mapping[value]};`;\n    }\n}\n","export default class create_size_style {\n    constructor(node,css_to_be_processed, isText = false, tag) {\n        this.node = node;\n        this.css = '';\n        this.css_to_be_processed = css_to_be_processed;\n        this.isText = isText;\n        this.tag = tag;\n    }\n\n    handleSizeOptions() {\n        const options = ['minWidth', 'minHeight', 'maxWidth', 'maxHeight'];\n\n        options.forEach(option => {\n            // css conversion \n         \n            if (this.node[option] !== undefined && this.node[option] !== 0 && this.node[option] !== null) {\n               let css_option = option.replace('Width', '-width').replace('Height', '-height');\n                this.css_to_be_processed.base[css_option] = `${this.node[option]}px`;\n            }\n        });\n    }\n\n    calculateChildSize() {\n        const { width, height, parent } = this.node;\n         let isContainer =  parent.width == undefined;\n         let fit_content_elements = ['button', 'a', 'input', 'select', 'textarea'];\n         if(isContainer || this.isText ||  fit_content_elements.includes(this.tag.toLowerCase())) {\n          \n            this.css_to_be_processed.base['width'] =   this.isText ?  'fit-content' : `100%`;\n            this.css_to_be_processed.base['height'] =  `auto`;\n            if(!this.isText){\n            this.css_to_be_processed.base['aspect-ratio'] = `${width}/${height}`;\n            }\n            return;\n         }\n\n           let childWidth = (width / parent.width) * 100;\n\n        childWidth = childWidth.toFixed(2);\n       \n        this.css_to_be_processed.base['width'] = `${childWidth}%`;\n\n        let childHeight = (height / parent.height) * 100;\n        childHeight = childHeight.toFixed(2);\n        this.css_to_be_processed.base['aspect-ratio'] = `${width}/${height}`;\n    }\n\n    generate() {\n        const { width, parent } = this.node;\n\n        this.handleSizeOptions();\n\n        if (width !== undefined) {\n            if (parent) {\n                this.calculateChildSize();\n            } else {\n                this.css += `width: 100%;\\n`;\n                this.css += `height: 100%;\\n`;\n            }\n        }\n\n        return this.css;\n    }\n}\n","export default class create_text_style {\n    constructor(node, process_array) {\n       \n        this.fills = node.fills;\n        this.fontName = node.fontName;\n        this.fontSize = node.fontSize;\n        this.fontWeight = node.fontWeight;\n        this.letterSpacing = node.letterSpacing;\n        this.lineHeight = node.lineHeight;\n        this.paragraphIndent = node.paragraphIndent;\n        this.paragraphSpacing = node.paragraphSpacing;\n        this.textCase = node.textCase;\n        this.textDecoration = node.textDecoration;\n        \n        this.textAlignHorizontal = node.textAlignHorizontal;\n        this.textAlignVertical = node.textAlignVertical;\n        this.process_array = process_array;\n        \n\n        this.textCaseMappings = {\n            UPPER: 'text-transform: uppercase',\n            LOWER: 'text-transform: lowercase',\n            TITLE: 'text-transform: capitalize',\n            ORIGINAL: 'text-transform: none',\n        };\n\n        this.textDecorationMappings = {\n            UNDERLINE: 'text-decoration: underline',\n            STRIKETHROUGH: 'text-decoration: line-through',\n            NONE: 'text-decoration: none',\n        };\n    }\n\n    static getStyleByValue(value, mapping) {\n        return mapping[value] || '';\n    }\n\n    createTextStyle() {\n       \n        const unitConversion   = {\n            PIXELS: 'px',\n            PERCENT: '%',\n            AUTO: 'auto',\n        };\n      \n    \n        // Text Decoration\n       \n        let textDecoration = create_text_style.getStyleByValue(this.textDecoration, this.textDecorationMappings).split(':')[1];\n        this.process_array.base['text-decoration'] =  textDecoration.trim();\n     \n       \n\n        // Letter Spacing\n        let letterSpacing = isNaN(this.letterSpacing.value) ? \"\" :  this.letterSpacing.value;\n       \n        \n        if(letterSpacing) {\n            this.process_array.base['letter-spacing'] =  `${letterSpacing}${unitConversion[this.letterSpacing.unit]}`;\n        }\n       \n        // lineHeight: \n        let lineHeight = isNaN(this.lineHeight.value) ? \"\" :  this.lineHeight.value;\n        if(lineHeight) {\n            this.process_array.base['line-height'] =  `${Math.round(lineHeight)}${unitConversion[this.lineHeight.unit]}`;\n        }\n     let paragraph_spacing = isNaN(this.paragraphSpacing) ? \"\" :  this.paragraphSpacing;\n        if(paragraph_spacing) {\n            this.process_array.base['margin-bottom'] =  `${Math.round(paragraph_spacing)}px`;\n        }\n      \n \n       let text_case  = create_text_style.getStyleByValue(this.textCase, this.textCaseMappings).split(':')[1];\n         this.process_array.base['text-transform'] =  text_case.trim();\n      \n        \n        \n  \n        this.process_array.base['font-family'] =  this.fontName.family;\n        this.process_array.base['font-size'] =  this.fontSize + 'px';\n        this.process_array.base['font-weight'] =  this.fontWeight;\n\n\n    // see if align is left, right, center, or justify\n        let text_align = this.textAlignHorizontal.toLowerCase();\n        if (!text_align.includes('left')) {\n            this.process_array.base['text-align'] =   text_align;\n        }\n        if (this.fontName.style.toLowerCase().includes('italic')) {\n       \n            this.process_array.base['font-style'] =  'italic';\n        }\n\n      \n    }\n}\n \n\n"," import { color_and_opacity_converter } from \"../utils/colors/color_capacity_converter\";\nexport default class utiltiy_style_creator {\n    constructor(node, css_to_be_processed) {\n        this.node = node;\n        this.css_to_be_processed = css_to_be_processed;\n       \n    }\n    generate() {\n        let functions_to_be_called = [\n            this.createRadiusStyle.bind(this),\n           \n            this.createBorderStyle.bind(this),\n            this.createOpacityStyles.bind(this),\n            this.createRotationStyle.bind(this),\n            this.createDropshadowStyle.bind(this),\n\n        ];\n    \n        functions_to_be_called.forEach((func) => {\n            let returned_object = (func && func()) || null;\n            if (returned_object) {\n                 let keys = Object.keys(returned_object);\n                keys.forEach(key => {\n                    this.css_to_be_processed.base[key] = returned_object[key];\n            }\n                );\n            }\n        });\n    }\n    \n    createRadiusStyle() {\n        const { topLeftRadius, topRightRadius, bottomRightRadius, bottomLeftRadius } = this.node || null;\n        if(!topLeftRadius && !topRightRadius && !bottomRightRadius && !bottomLeftRadius) return;\n        // if all zeros return\n        if(topLeftRadius === 0 && topRightRadius === 0 && bottomRightRadius === 0 && bottomLeftRadius === 0) return;\n\n        return {\n            ['border-radius']: `${topLeftRadius}px ${topRightRadius}px ${bottomRightRadius}px ${bottomLeftRadius}px`,\n        };\n    }\n\n    createPaddingStyle() {\n        const { paddingTop, paddingRight, paddingBottom, paddingLeft } = this.node || null;\n        if(!paddingTop && !paddingRight && !paddingBottom && !paddingLeft) return;\n        // if all zeros return\n        \n        return {\n            padding: `${paddingTop}px ${paddingRight}px ${paddingBottom}px ${paddingLeft}px`,\n        };\n    }\n\n    createBorderStyle() {\n        \n        const { strokes, \n            strokeTopWeight, \n            strokeRightWeight,\n            strokeBottomWeight,\n            strokeLeftWeight,\n        } = this.node || null;\n        if(!strokes) return;\n        const stroke = strokes && strokes[0];\n     \n\n        if (!stroke) {\n            return null; // No strokes provided\n        }\n\n        const { color, opacity } = stroke;\n   \n        const roundedOpacity = opacity.toFixed(2);\n\n        const rgbaColor = color_and_opacity_converter(color, roundedOpacity);\n          let weight; \n        if(strokeTopWeight === strokeRightWeight && strokeTopWeight === strokeBottomWeight && strokeTopWeight === strokeLeftWeight){\n            weight = `${strokeTopWeight}px`;\n        } else {\n            weight = `${strokeTopWeight}px ${strokeRightWeight}px ${strokeBottomWeight}px ${strokeLeftWeight}px`;\n        }\n\n        return {\n            border: `${weight}  solid ${rgbaColor}`,\n          \n        };\n    }\n\n    createOpacityStyles() {\n        const { opacity } = this.node || null;\n        if(!opacity) return;\n        \n        const dividedBy100 = opacity;\n        const roundedOpacity = dividedBy100.toFixed(2);\n            \n        return {\n            opacity: `${roundedOpacity}`,\n        };\n    }\n\n    createRotationStyle() {\n        const { rotation } = this.node || null  ;\n        let rotationValue = rotation;\n        // fixc to 2 \n        if(!rotationValue) return;\n        rotationValue = rotationValue.toFixed(2);\n        return {\n            transform: `rotate(${rotationValue || 0}deg)`,\n        };\n    }\n\n    createDropshadowStyle() {\n        const { effects } = this.node || null;\n        if(!effects) return;\n        const dropShadowEffect = effects && effects.find(effect => effect.type === \"DROP_SHADOW\");\n\n        if (!dropShadowEffect) {\n            return null;\n        }\n\n        const { color, offset, radius, spread } = dropShadowEffect;\n        let new_color = {\n            r: color.r,\n            g: color.g,\n            b: color.b,\n            \n        }\n        let new_opacity = color.a;\n        const roundedOpacity = new_opacity.toFixed(2);\n        const rgbaColor = color_and_opacity_converter(new_color, roundedOpacity);\n        const boxShadowValue = `${offset.x}px ${offset.y}px ${radius}px ${spread}px  ${rgbaColor}`;\n\n        return {\n             ['box-shadow']: boxShadowValue,\n        };\n    }\n}\n\n "," \n\nexport default {\n    \"h1\": \"h1\",\n    \"h2\": \"h2\",\n    \"h3\": \"h3\",\n    \"h4\": \"h4\",\n    \"h5\": \"h5\",\n    \"h6\": \"h6\",\n    \"p\": \"p\",\n    \"image\": \"img\",\n    \"section\": \"section\",\n    \"aside\": \"aside\",\n    \"form\": \"form\",\n    \"input\": \"input\",\n    \"button\": \"button\",\n    \"label\": \"label\",\n    \"select\": \"select\",\n    \"option\": \"option\",\n    \"textarea\": \"textarea\",\n    \"div\": \"div\",\n    \"span\": \"span\",\n    \"ul\": \"ul\",\n    \"li\": \"li\",\n    \"ol\": \"ol\",\n    \"nav\": \"nav\",\n    \"header\": \"header\",\n    \"footer\": \"footer\",\n    \"main\": \"main\",\n    \"article\": \"article\",\n    \"a\": \"a\",\n    \n    \n};","import RemoveDuplicateHandler from \"../utils/classes/duplicate_remove\";\n\n \n\nclass write_css_file {\n    constructor(css_objects){\n        this.css_objects = css_objects;\n        this.variant_classes = [];\n        this.variant_separator();\n        this.css_string = '';\n        this.remove_duplicates();\n        \n        \n     \n    }\n\n    css_string_constructor() {\n      this.css_string += this.generateCssString(this.css_objects);\n      this.css_string += this.generateCssString(this.variant_classes, true);\n       return   this.css_string;\n }\n\n    variant_separator() {\n    let variant_separation  =  this.css_objects.reduce((acc, css_object) => {\n        let classes = css_object.class_name.split(' ');\n        // if less than 2 classes, return\n        if(classes.length < 2) {\n            acc.regular_css.push(css_object);\n            return acc;\n        };\n        css_object.base_variant_class = classes[0];\n       \n        if(acc.variants.length === 0){\n            css_object.variant_classes =  '';\n            console.log(css_object, 'first');\n            acc.variants.push(css_object);\n            return acc;\n        } else {\n            css_object.variant_classes = classes.slice(1).join(' ');\n        }\n        // let found = acc.find((css_object_in_acc) => css_object_in_acc.base_variant_class === css_object.base_variant_class);\n        let found = acc.variants.find((css_object_in_acc) => css_object_in_acc.base_variant_class === css_object.base_variant_class);\n        if(found) {\n         let clean_css = new RemoveDuplicateHandler(found, css_object);\n            let cleaned_css = clean_css.removeDuplicateStates();\n           acc.variants.push(cleaned_css);\n           return acc;\n\n        } else {\n            acc.variants.push(css_object);\n            return acc;\n        }\n\n   \n     }  , {\n        variants: [],\n        regular_css: []\n     });\n \n\n     const {variants, regular_css} = variant_separation;\n         this.variant_classes = variants;\n         this.css_objects = regular_css;\n       \n        return this;\n  \n\n    }\n\n/**\n * Removes duplicate CSS objects based on class_name and properties within states.\n */\nremove_duplicates() {\n    \n\n    // Initialize an array to store unique CSS objects\n    this.clean_css_objects = [];\n\n    // Iterate through each CSS object\n    this.css_objects.forEach((css_object) => {\n        // Call the helper function to handle duplicate removal\n        this.removeDuplicateStates(css_object);\n    });\n}\n\n/**\n * Checks for duplicate CSS objects based on class_name and decides whether to add the current css_object.\n * @param {Object} css_object - The CSS object to check for duplicates.\n */\nremoveDuplicateStates(css_object,) {\n    // Find a comparable object in the existing clean_css_objects array\n    //   css_object,\n    let compareable_object = this.clean_css_objects.find((clean_css_object) => clean_css_object.class_name === css_object.class_name);\n\n    // If a comparable object is found, remove duplicates and add the current css_object\n    if (compareable_object) {\n        this.removeDuplicateProperties(css_object, compareable_object);\n        this.clean_css_objects.push(css_object);\n        \n    } else {\n        css_object.modify_id = false;\n        // If no comparable object is found, simply add the current css_object\n        this.clean_css_objects.push(css_object);\n    }\n}\n\n/**\n * Compares and removes duplicate properties within states.\n * @param {Object} css_object - The current CSS object.\n * @param {Object} compareable_object - The comparable CSS object.\n */\nremoveDuplicateProperties(css_object, compareable_object) {\n    // Define the states to compare\n    let states = ['base', 'before', 'after', 'hover', 'focus'];\n\n    // Iterate through each state\n    states.forEach((state) => {\n        // Extract the state's object and keys\n        let object = css_object[state];\n        let object_keys = Object.keys(object);\n\n        // If necessary properties are missing, skip this state\n        if (!css_object || !object_keys || object_keys.length === 0) return;\n\n        // Iterate through each property within the state\n        object_keys.forEach((key) => {\n            let value = object[key];\n\n            // If a property is found and matches the comparable object, delete it\n            if (value && compareable_object[state][key] === value) {\n                delete css_object[state][key];\n            }\n        });\n    });\n    css_object.modify_id = true;\n}\n\n\n    \n /**\n  * \n  * @param {*} cssObject \n  *  \n  */\n\ngenerateCssString(cssObjects, isVariant = false) {\n     let cssString = '';\n\n   const processClassName = (className)  => {\n        let multipleClassNames = className.split(' ');\n        // map and attach '.' to each class name\n        multipleClassNames = multipleClassNames.map((name) => `.${name}`);\n        // join the class names\n        return multipleClassNames.join('').replace('.default', '');\n    }\n\n    const process_variant_class = (cssObject) => { \n\n        return cssObject.variant_classes ? `${processClassName(cssObject.base_variant_class)}${processClassName(cssObject.variant_classes)}` : processClassName(cssObject.base_variant_class);\n    }\n \n\n   const processPropertyValues = (key, value) =>  {\n        let skipValues = ['undefined', 'null', '', 'none', 'auto', '1', '1.00'];\n        return (value && !skipValues.includes(value)) ? `${key}: ${value}; \\n` : '';\n    }\n\n     const generateStateCss = (cssObject,state) =>  {\n        let object = cssObject[state];\n        \n         \n        // object_keys\n        let objectKeys = Object.keys(object);\n        // if cssObject or objectKeys is empty or object keys = 0 return;\n        if (!cssObject || !objectKeys || objectKeys.length === 0) return '';\n\n        let addId = cssObject.modify_id ? `#${cssObject.id}` : '';\n        let processedClassName = isVariant ? process_variant_class(cssObject) : processClassName(cssObject.class_name);\n        // css string with id and class name for specificity; if state is not base, add pseudo-class\n        let stateCss = `${addId}${processedClassName}${state === 'base' ? '' : `:${state}`} { \\n`;\n\n        objectKeys.forEach((key) => {\n            let value = object[key];\n            stateCss += processPropertyValues(key, value);\n        });\n\n        stateCss += `} \\n \\n`;\n        return stateCss;\n    }\n    \n    const processCssObject = (css_object) => {\n        let states = ['base', 'before', 'after', 'hover', 'focus'];\n    \n        states.forEach((state) => cssString += generateStateCss(css_object, state));\n    };\n\n\n    cssObjects.forEach((cssObject) => processCssObject(cssObject));\n  \n    return cssString;\n}\n\n}\n\n\nexport default write_css_file;"," import create_fill_style from \"../Property Conversions/create_fill_style \";\nimport create_flex_size from \"../Property Conversions/create_flex_size\";\nimport create_size_style from \"../Property Conversions/create_size_style\";\nimport create_text_style from \"../Property Conversions/create_text_style\";\nimport utiltiy_style_creator from \"../Property Conversions/utility_style_creator\";\n\n\n \n \nexport default class CSS_Generation{\n    constructor(node, id, class_name, tag){\n        this.node = node;\n        this.id = id;\n        this.class_name = class_name;\n        this.css = '';\n        this.parent  = node.parent;\n        this.grid = node.name.toLowerCase().includes('grid');\n        this.flex = node.name.toLowerCase().includes('flex');\n        this.css_to_be_processed = {\n            id: this.id,\n            class_name: this.class_name,\n            screenSize:\"desktop\",\n            base: {},\n            before: {},\n            after: {},\n            hover: {},\n            focus: {},\n        }\n        this.layoutMode = node.layoutMode;\n        this.isText = this.node.type === \"TEXT\";\n        this.tag = tag;\n\n    \n  \n    }\n\n    generate(){\n        this.css = this.css_creation();\n        return this.css_to_be_processed;\n    }\n\n    css_creation(){\n      let fill  = new create_fill_style(this.node, this.css_to_be_processed, this.isText).fillSelection();\n      this.isText && new create_text_style(this.node, this.css_to_be_processed).createTextStyle();\n      if(this.layoutMode !== 'NONE' && this.layoutMode !== undefined && this.layoutMode !== null )  new create_flex_size(this.node, this.css_to_be_processed).generate();\n        new create_size_style(this.node, this.css_to_be_processed, this.isText, this.tag).generate();\n        new utiltiy_style_creator(this.node, this.css_to_be_processed, this.isText).generate();\n    }\n\n}","/** \n * HTML_Generation class represents a utility for generating HTML code based on a provided node.\n * \n * Table of Contents:\n * 1. Constructor\n * 2. generate\n * 3. html_creation\n * 4. tag_handler\n * 5. attributes\n * 6. get_variants\n * 7. is_closed_html_elements_method\n * 8. convert_children_to_html\n * 9. indentation_spacing\n * 10. isText\n */\n\nimport tags from \"../constants/tags\";\n \n\nimport { uid } from \"uid\";\nimport CSS_Generation from \"./css_genereation\";\nimport Node_Manager from \"../node_manager\";\n \n\n \nexport default class HTML_Generation {\n    /**\n     * 1. Constructor for HTML_Generation class.\n     * @param {Object} node - The node used for HTML generation.\n     */\n    constructor(node, responsive_design = false, max_screen_size = null, dyanmic_properties = null) {\n        this.node = node;\n        this.responsive_design = responsive_design;\n        this.max_screen_size = max_screen_size;\n        this.dyanmic_properties = dyanmic_properties;\n        console.log(this.max_screen_size, this.dyanmic_properties,  this.node.name);\n       this.tag;\n    }\n\n    /**\n     * 2. Generates HTML code based on the provided node.\n     */\n    generate(indentation = 1, css_objects_to_string  = []) {\n        this.indentation = indentation;\n        this.css_objects_to_string = css_objects_to_string;\n        this.html = this.html_creation();\n      \n        //  console.log(this.continue_generation(), 'generate');\n       \n     return this.html;\n    }\n\n    continue_generation(){\n        let continue_generation = false;\n        if(!this.responsive_design )  \n        {\n            return true;\n        }\n\n\n     \n        this.dyanmic_properties == 'responsive'  || this.dyanmic_properties == this.max_screen_size  ? continue_generation = true : continue_generation = false;  \n        return continue_generation;\n    }\n\n    /**\n     * 3. Creates HTML code by handling tags, attributes, and self-closing elements.\n     */\n    html_creation() {\n       \n        const { tag, id, variant_classes } = this.tag_handler(this.node.name);\n      \n        const isText = this.isText(this.node);\n        \n        const indentation_spacing = this.indentation_spacing();\n        let text = isText ? this.node.characters : '';\n         const selfClosing = this.is_closed_html_elements_method(tag);\n         this.tag = tag;\n         this.css =  new CSS_Generation(this.node, this.id,  variant_classes, this.tag);\n         this.css =  this.css.generate();\n        \n         this.css_objects_to_string.push(this.css);\n         if(this.continue_generation()) {\n \n        const closingTag = selfClosing ? '' : `</${ isText ? \"span\" : tag}>`;\n        const closing_slash = selfClosing ? '/' : '';\n         const children_html = this.convert_children_to_html(this.node.children);\n         \n\n\n         return `\\n${indentation_spacing}<${isText ? 'span' : tag} id=\"${id}\" class=\"${variant_classes}\"${closing_slash}>${text}${children_html}${ !isText ? indentation_spacing : \"\"}${ closingTag}`; \n         } else {\n                return '';\n         }\n    }\n\n    /**\n     * 4. Handles the selection of tags based on the node name.\n     * @param {string} name - The name of the node.\n     * @returns {Object} - An object containing tag, id, and variant_classes.\n     */\n    tag_handler(name) {\n    //    regex to remove from :[ to ]\n       let prop_regex =  /:\\[.*?\\]/g;\n         name = name.replace(prop_regex, ''); \n        let orginial_name = name;\n        name = name.split('.')[0];\n\n        const tag = tags[name.toLowerCase()] || \"div\";\n        const { id, variant_classes } =  this.attributes(orginial_name);\n        return { tag, id, variant_classes };\n    }\n\n    /**\n     * 5. Extracts attributes (id and variant_classes) from the provided name.\n     * @param {string} name - The name of the node.\n     * @returns {Object} - An object containing id and variant_classes.\n     */\n    attributes(name) {\n        let orginial_name = name;\n       if(name.includes('.')){\n           name = name.split('.')[1];\n         }\n        const id = `${name.toLowerCase() + \"-\" + uid(10)}`.replaceAll(\" \", \"-\");\n        const classes = name.toLowerCase().replaceAll(\" \", \"-\");\n        this.id = id;\n        this.class_name = classes;\n        const variant_classes = `${classes}${this.get_variants()}`;\n        return { id, variant_classes };\n    }\n\n    /**x\n     * 6. Extracts variant classes from the node's variant properties.\n     * @returns {string} - A string containing variant classes.\n     */\n    get_variants() {\n        return this.node.variantProperties ? Object.keys(this.node.variantProperties).map((key) => ` ${this.node.variantProperties[key].toLowerCase().replace(\" \", \"-\")}`).join(\"\") : \"\";\n    }\n\n    /**\n     * 7. Checks if a given HTML element is self-closing.\n     * @param {string} value - The HTML element tag.\n     * @returns {boolean} - True if the element is self-closing, otherwise false.\n     */\n    is_closed_html_elements_method(value) {\n        const selfClosingTags = ['img', 'input', 'br', 'hr', 'meta', 'link', 'param', 'source', 'area', 'base', 'col', 'embed', 'keygen', 'menuitem', 'track', 'wbr'];\n        return selfClosingTags.includes(value);\n    }\n\n    /**\n     * 8. Converts the node's children to HTML code.\n     * @param {Array} children - The array of children nodes.\n     * \n     * @returns {string} - A string containing HTML code.\n     */\n    convert_children_to_html(children) {\n        if (!children || !Array.isArray(children)) return \"\";\n     \n        const indentation_spacing = this.indentation_spacing();\n\n        const children_html = children.map((child) => {\n            const node_manager = new Node_Manager(child);\n            return node_manager.html.generate( this.indentation + 1, this.css_objects_to_string);\n        }).join(\"\");\n\n        return `${indentation_spacing}${children_html}\\n`;\n    }\n\n    /**\n     * 9. Creates indentation spacing based on the current indentation level.\n     * @returns {string} - A string containing indentation spacing.\n     */\n\n    indentation_spacing() {\n         \n        let indentation = \"\";\n        for (let i = 0; i <  this.indentation ; i++) {\n           \n            indentation += \"  \";  // Use spaces for indentation\n        }\n    \n       \n        return indentation;\n    }\n    \n    /**\n     * 10. Checks if a given node is a text node.\n     * @param {Object} node - The node to check.\n     * @returns {boolean} - True if the node is a text node, otherwise false.\n     */\n    isText(node) {\n        return node.type === \"TEXT\";\n    }\n\n}\n ","import HTML_Generation from \"./generation/html_generation\";\n\n \nexport default class Node_Manager {\n    constructor(node, max_screen_size= null){\n        this.node = node;\n     \n        this.dyanmic_properties   =   this.node.name.includes(':[')  ? this.node.name.split(':[').reverse()[0].replace(']','') : null;\n         this.max_screen_size = max_screen_size;\n        if(this.dyanmic_properties && (this.dyanmic_properties == 'responsive') )  {\n            this.max_screen_size = this.largest_screen_finder();\n        } \n        \n       if(this.max_screen_size){\n        this.html = new HTML_Generation(node, true,  this.max_screen_size, this.dyanmic_properties);\n    \n       } else {\n        this.html = new HTML_Generation(node, false,  this.max_screen_size,  this.dyanmic_properties);\n       }\n    \n         \n    }\n\n    largest_screen_finder(){\n       \n        let screen_size_values = [\n            {value: 0, name: 'responsive-mobile'},\n            {name: 'responsive-tablet', value: 768},\n            {name: 'responsive-desktop', value: 1024},\n            {name: 'responsive-big-desktop', value: 1440},\n        ]\n        let largest_screen = 'responsive-mobile';\n        let {children} = this.node;\n      \n         if(children){\n           largest_screen =  children.reduce((largest_size, surface, index) => {\n                let responsive_property = surface.name.includes(':[')  ? surface.name.split(':[').reverse()[0].replace(']','') : 0;\n                // if responsive not found in name, return 0\n                if(!responsive_property) return largest_size;\n                // if responsive property is greater than largest size, return responsive property\n                let current_screen = screen_size_values.find(screen => screen.name === responsive_property);\n\n                if(current_screen && current_screen.value > largest_size) largest_size =  current_screen.value;\n                // if last item in array, return largest size\n                if(index === children.length - 1) {\n                    // find the screen size name\n                    let screen_size = screen_size_values.find(screen => screen.value === largest_size);\n                    largest_screen = screen_size.name;\n                    return largest_screen;\n                }\n              return largest_size;\n            }, 0\n            )\n\n         }\n \n      return largest_screen;\n         \n    }\n\n}","export default class RemoveDuplicateHandler{\n    constructor(compareable_object, current_object, key_states = ['base', 'before', 'after', 'hover', 'focus']){\n        this.compareable_object = compareable_object;\n        this.current_object = current_object;\n        this.key_states = key_states;\n      this.removeDuplicateStates();\n        \n    }\n\n    removeDuplicateStates(){\n        this.key_states.forEach((state) => {\n            // Extract the state's object and keys\n            let object = this.current_object[state];\n            let object_keys = Object.keys(object);\n    \n            // If necessary properties are missing, skip this state\n            if (!this.current_object || !object_keys || object_keys.length === 0) return;\n    \n            // Iterate through each property within the state\n            object_keys.forEach((key) => {\n                let value = object[key];\n    \n                // If a property is found and matches the comparable object, delete it\n                if (value && this.compareable_object[state][key] === value) {\n                    delete this.current_object[state][key];\n                }\n            });\n        }\n        );\n\n        return this.current_object;\n    }\n\n}"," \n const rgb_to_hex  = (r, g, b)  => {\n    const toHex = (value) => {\n        const hex = value.toString(16);\n        return hex.length === 1 ? '0' + hex : hex;\n    };\n\n    const hexR = toHex(r);\n    const hexG = toHex(g);\n    const hexB = toHex(b);\n\n    return `#${hexR}${hexG}${hexB}`;\n}\n\nconst convert_decimal_to_rgba_value = (value = .5) => {\n    // convert to 255 rgba value and be sure to round to the nearest whole number\n    return Math.round(value * 255);\n\n}\n\n  const color_and_opacity_converter =  (color, opacity) =>  {\n    \n \n     \n    const { r, g, b } = color;\n    const red = convert_decimal_to_rgba_value(r);\n    const green = convert_decimal_to_rgba_value(g);\n    const blue = convert_decimal_to_rgba_value(b);\n\n     \n    if(+opacity === 1){\n        let hex =  rgb_to_hex(red, green, blue);\n        return hex;\n    } else {\n        return `rgba(${red}, ${green}, ${blue}, ${opacity})`;\n    }\n  \n    \n\n}\n\n\n// export colorAndOpacityConverter and rgb_to_hex\nmodule.exports=  { color_and_opacity_converter, rgb_to_hex, convert_decimal_to_rgba_value }","var IDX=256, HEX=[], SIZE=256, BUFFER;\nwhile (IDX--) HEX[IDX] = (IDX + 256).toString(16).substring(1);\n\nexport function uid(len) {\n\tvar i=0, tmp=(len || 11);\n\tif (!BUFFER || ((IDX + tmp) > SIZE*2)) {\n\t\tfor (BUFFER='',IDX=0; i < SIZE; i++) {\n\t\t\tBUFFER += HEX[Math.random() * 256 | 0];\n\t\t}\n\t}\n\n\treturn BUFFER.substring(IDX, IDX++ + tmp);\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};"," \nimport write_css_file from \"../../../figma/filesystem/write_css_file\";\nimport Node_Manager from \"../../../figma/node_manager\";\n//  (function() {\n//   const currentLayer = figma.currentPage.selection[0];\n\n//   if (!currentLayer) {\n//     figma.closePlugin(\"Please select a layer and try again\");\n//   } else {\n//     const node_manager = new Node_Manager(currentLayer);\n\n//     node_manager.html.generate();\n//     let html = node_manager.html.html;\n//     let css_object = node_manager.html.css_objects_to_string;\n\n    \n\n//     const css = new write_css_file(css_object).css_string_constructor();\n\n   \n//  figma.showUI(__html__, { width: 800, height: 800 });\n//     figma.ui.postMessage({\n//       type: \"generation\",\n//       html: html,\n//       css: css,\n    \n//     }, {origin: '*'});\n//   }\n//   // figma.closePlugin();\n//  })();\n   \nconst currentLayer = figma.currentPage.selection[0];\n class App_Data_Manager {\n  constructor(node) {\n    this.node = node;\n    this.nodes = [];\n     \n  }\n\n  get_nodes() {\n    this.nodes = [];\n    let node_manager = new Node_Manager(this.node);\n    this.nodes.push(node_manager);\n    this.collect_children(this.node.children);\n  }\n\n  collect_children(children) {\n    if (children && children.length > 0) {\n      children.forEach(child => {\n        let node_manager = new Node_Manager(child);\n        this.nodes.push(node_manager);\n        this.collect_children(child.children);\n      });\n    }\n  }\n  is_responsive(){\n    // searcy this.nodes for a one that has a dynamic property of responsive\n    let responsive_node = this.nodes.find(node => node.dyanmic_properties === 'responsive');\n    return responsive_node ? true : false;\n  }\n\n  largest_screen_finder(){\n  \n    let screen_size_values = [\n        {value: 0, name: 'responsive-mobile'},\n        {name: 'responsive-tablet', value: 768},\n        {name: 'responsive-desktop', value: 1024},\n        {name: 'responsive-big-desktop', value: 1440},\n    ]\n    let largest_screen = 'responsive-mobile';\n     \n       \n     if(this.nodes){\n       let largest_value =   this.nodes.reduce((largest_size, surface, index) => {\n            let responsive_property = surface.dyanmic_properties;\n           \n            let current_screen = screen_size_values.find(screen => screen.name === responsive_property);\n\n            if(current_screen && current_screen.value > largest_size) largest_size =  current_screen.value;\n             \n            console.log(index, 'index');\n          return largest_size;\n        }, 0\n        )\n        largest_screen =  screen_size_values.find(screen => screen.value === largest_value).name;\n\n        console.log('in here');\n\n     }\n     return largest_screen;\n  }\n}\n\nconst application_manager = new App_Data_Manager(currentLayer);\napplication_manager.get_nodes();\nlet nodes = application_manager.nodes;\nlet isResponsive = application_manager.is_responsive();\nlet largest_screen = application_manager.largest_screen_finder();\nconsole.log(nodes, 'nodes');\nconsole.log(isResponsive, 'isResponsive');\nconsole.log(largest_screen, 'largest_screen');\n"],"names":["create_fill_style","constructor","node","process_array","isText","this","figmaLayers","fills","slice","colorAndOpacityConverter","color_and_opacity_converter","convert_decimal_to_rgba_value","fillSelection","textColorCss","figmaLayersToBackgroundCSS","color","opacity","base","first_background","imageOrSolidCss","parse_and_add_background_to_array","position","length","second_background","setStyles","third_background","layer","type","generateImageLayerCSS","generateSolidLayerCSS","background","Object","keys","forEach","key","zIndex","content","top","left","width","height","create_flex_size","css_to_be_processed","layoutMode","name","primaryAxisAlignItems","counterAxisAlignItems","layoutWrap","verticalPadding","horizontalPadding","itemSpacing","counterAxisSpacing","isGrid","toLowerCase","includes","isWrap","horiztionalPadding","generate","handleLayoutMode","handleWrap","handleFlex","spacing","css","justify_content","convertAlignmentToCss","align_items","split","trim","value","property","min","center","max","create_size_style","tag","handleSizeOptions","option","undefined","css_option","replace","calculateChildSize","parent","childWidth","toFixed","childHeight","create_text_style","fontName","fontSize","fontWeight","letterSpacing","lineHeight","paragraphIndent","paragraphSpacing","textCase","textDecoration","textAlignHorizontal","textAlignVertical","textCaseMappings","UPPER","LOWER","TITLE","ORIGINAL","textDecorationMappings","UNDERLINE","STRIKETHROUGH","NONE","getStyleByValue","mapping","createTextStyle","unitConversion","PIXELS","PERCENT","AUTO","isNaN","unit","Math","round","paragraph_spacing","text_case","family","text_align","style","utiltiy_style_creator","createRadiusStyle","bind","createBorderStyle","createOpacityStyles","createRotationStyle","createDropshadowStyle","func","returned_object","topLeftRadius","topRightRadius","bottomRightRadius","bottomLeftRadius","createPaddingStyle","paddingTop","paddingRight","paddingBottom","paddingLeft","padding","strokes","strokeTopWeight","strokeRightWeight","strokeBottomWeight","strokeLeftWeight","stroke","roundedOpacity","weight","border","rotation","rotationValue","transform","effects","dropShadowEffect","find","effect","offset","radius","spread","new_color","r","g","b","a","rgbaColor","x","y","css_objects","variant_classes","variant_separator","css_string","remove_duplicates","css_string_constructor","generateCssString","variant_separation","reduce","acc","css_object","classes","class_name","regular_css","push","base_variant_class","variants","console","log","join","found","css_object_in_acc","cleaned_css","RemoveDuplicateHandler","removeDuplicateStates","clean_css_objects","compareable_object","clean_css_object","removeDuplicateProperties","modify_id","state","object","object_keys","cssObjects","isVariant","cssString","processClassName","className","multipleClassNames","map","generateStateCss","cssObject","objectKeys","stateCss","id","process_variant_class","processPropertyValues","processCssObject","CSS_Generation","grid","flex","screenSize","before","after","hover","focus","css_creation","HTML_Generation","responsive_design","max_screen_size","dyanmic_properties","indentation","css_objects_to_string","html","html_creation","continue_generation","tag_handler","indentation_spacing","text","characters","selfClosing","is_closed_html_elements_method","closingTag","convert_children_to_html","children","orginial_name","tags","attributes","uid","replaceAll","get_variants","variantProperties","Array","isArray","child","Node_Manager","i","reverse","largest_screen_finder","screen_size_values","largest_screen","largest_size","surface","index","responsive_property","current_screen","screen","screen_size","current_object","key_states","rgb_to_hex","toHex","hex","toString","module","exports","red","green","blue","BUFFER","IDX","HEX","SIZE","substring","len","tmp","random","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","n","getter","__esModule","d","definition","o","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","currentLayer","figma","currentPage","selection","application_manager","nodes","get_nodes","node_manager","collect_children","is_responsive","largest_value","isResponsive"],"sourceRoot":""}